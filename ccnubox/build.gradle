apply plugin: 'com.android.application'
apply plugin: 'com.tencent.tinker.patch'


def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId "net.muxi.huashiapp"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        ndk{abiFilters "armeabi"}

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }


    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

//library default is release
def currentBuildType = "release"

gradle.startParameter.taskNames.each({
    String taskNameL = it.toLowerCase()
    if(taskNameL.contains("assemble") || taskNameL.contains("install")) {
        if(taskNameL.contains("debug")) {
            currentBuildType = "debug"
            return;
        } else if(taskNameL.contains("release")) {
            currentBuildType = "release"
            return;
        }
    }
})

dependencies {
    implementation project(':app')
}

apply from :'tinker.gradle'